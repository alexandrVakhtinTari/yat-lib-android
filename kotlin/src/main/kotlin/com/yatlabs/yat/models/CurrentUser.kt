/**
* Emoji ID API server
* Emoji ID is a directory service that associates almost any type of structured data with a short, memorable identifier the emoji id.
*
* The version of the OpenAPI document: 0.2.262
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.yatlabs.yat.models

import com.yatlabs.yat.models.CurrentUserFeatures
import com.yatlabs.yat.models.CurrentUserUser

import com.squareup.moshi.Json
import java.io.Serializable

/**
 * 
 * @param features Enabled features for the user
 * @param globalScopes A list of fine-grained permissions the user may perform.
 * @param organizationRoles The role this user has in each organisation. Organisations are currently not used, but are reserved for  future operations.
 * @param organizationScopes The scopes that are granted to this user for each organisation. Organisations are currently not used, but are  reserved for future operations.
 * @param pendingTransfers List of transfers pending acceptance on current user side
 * @param pubkeys A list of this user's public keys. When yats are deployed to the blockchain, users prove ownership of their  Yats with digital signatures, proving knowledge of the private keys that \"own\" the yat. In the centralised  implementation of Yat, the server will custody the users' wallets and private keys, but in other respects the  ownership model is the same.
 * @param role The role assigned to this user. Roles grant authority to user accounts to perform certain actions.
 * @param user 
 * @param everflowTransactionId transaction id indicating if the user signed up from a partner via everflow redirect
 */

data class CurrentUser (
    /* Enabled features for the user */
    @Json(name = "features")
    val features: kotlin.collections.List<CurrentUserFeatures>,
    /* A list of fine-grained permissions the user may perform. */
    @Json(name = "global_scopes")
    val globalScopes: List<CurrentUser.GlobalScopes>,
    /* The role this user has in each organisation. Organisations are currently not used, but are reserved for  future operations. */
    @Json(name = "organization_roles")
    val organizationRoles: kotlin.collections.Map<kotlin.String, kotlin.String>,
    /* The scopes that are granted to this user for each organisation. Organisations are currently not used, but are  reserved for future operations. */
    @Json(name = "organization_scopes")
    val organizationScopes: kotlin.collections.Map<kotlin.String, kotlin.collections.List<kotlin.String>>,
    /* List of transfers pending acceptance on current user side */
    @Json(name = "pending_transfers")
    val pendingTransfers: kotlin.collections.List<kotlin.String>,
    /* A list of this user's public keys. When yats are deployed to the blockchain, users prove ownership of their  Yats with digital signatures, proving knowledge of the private keys that \"own\" the yat. In the centralised  implementation of Yat, the server will custody the users' wallets and private keys, but in other respects the  ownership model is the same. */
    @Json(name = "pubkeys")
    val pubkeys: kotlin.collections.List<kotlin.String>,
    /* The role assigned to this user. Roles grant authority to user accounts to perform certain actions. */
    @Json(name = "role")
    val role: CurrentUser.Role,
    @Json(name = "user")
    val user: CurrentUserUser,
    /* transaction id indicating if the user signed up from a partner via everflow redirect */
    @Json(name = "everflow_transaction_id")
    val everflowTransactionId: kotlin.String? = null
) : Serializable {
    companion object {
        private const val serialVersionUID: Long = 123
    }

    /**
    * A list of fine-grained permissions the user may perform.
    * Values: adminCartUpdate,adminEmojiDestroy,adminEmojiLoad,adminEmojiRegister,adminEmojiTransfer,adminEmojiUpdateFeatures,adminEmojiUpdateSecureData,adminEmojiWrite,adminFeatureUserRead,adminInvitesWrite,adminInvitesList,adminLootboxRead,adminLootboxWrite,adminNotificationsWrite,adminUserBypass2fa,adminUserLoad,adminUserLoginAs,adminUserTwoFactorAuthDestroy,adminUserRoleUpdate,cartShow,cartUpdate,codeDelete,codeRead,codeWrite,userCreateApiKey,domainActionRead,domainEventRead,editionDelete,editionRead,editionWrite,emojiGroupsDelete,emojiGroupsRead,emojiGroupsWrite,emojiTransfer,featureDelete,featureRead,featureWrite,lootboxUse,orderPaymentOverride,orderRead,orderReadSelf,orderRefund,orderRefundOverride,orderResendConfirmation,organizationAdmin,organizationCodeAdmin,organizationEmojiList,organizationEmojiWrite,organizationListRead,organizationRead,organizationUserAdmin,organizationUserRead,organizationWrite,nftSignatureWrite,nftTokenDestroy,nftTransferRead,paymentMethodDestroy,paymentMethodRead,paymentMethodSetDefault,adminPriceParametersRead,adminPriceParametersWrite,refundRead,tokenRefresh,authTwoFactor,userActivate,userDataUpdate,userDelete,userDeleteSelf,userEmailVerify,userEmojiList,userInterestDelete,userInterestRead,userInterestWrite,userList,userPubkeysList,userPubkeysWrite,userShow,userWrite,userWriteSelf
    */
    
    enum class GlobalScopes(val value: String){
        @Json(name = "adminCart:update") adminCartUpdate("adminCart:update"),
        @Json(name = "adminEmoji:destroy") adminEmojiDestroy("adminEmoji:destroy"),
        @Json(name = "adminEmoji:load") adminEmojiLoad("adminEmoji:load"),
        @Json(name = "adminEmoji:register") adminEmojiRegister("adminEmoji:register"),
        @Json(name = "adminEmoji:transfer") adminEmojiTransfer("adminEmoji:transfer"),
        @Json(name = "adminEmoji:updateFeatures") adminEmojiUpdateFeatures("adminEmoji:updateFeatures"),
        @Json(name = "adminEmoji:updateSecureData") adminEmojiUpdateSecureData("adminEmoji:updateSecureData"),
        @Json(name = "adminEmoji:write") adminEmojiWrite("adminEmoji:write"),
        @Json(name = "adminFeatureUser:read") adminFeatureUserRead("adminFeatureUser:read"),
        @Json(name = "adminInvites:write") adminInvitesWrite("adminInvites:write"),
        @Json(name = "adminInvites:list") adminInvitesList("adminInvites:list"),
        @Json(name = "adminLootbox:read") adminLootboxRead("adminLootbox:read"),
        @Json(name = "adminLootbox:write") adminLootboxWrite("adminLootbox:write"),
        @Json(name = "adminNotifications:write") adminNotificationsWrite("adminNotifications:write"),
        @Json(name = "adminUser:bypass2fa") adminUserBypass2fa("adminUser:bypass2fa"),
        @Json(name = "adminUser:load") adminUserLoad("adminUser:load"),
        @Json(name = "adminUser:loginAs") adminUserLoginAs("adminUser:loginAs"),
        @Json(name = "adminUser:twoFactorAuthDestroy") adminUserTwoFactorAuthDestroy("adminUser:twoFactorAuthDestroy"),
        @Json(name = "adminUser:roleUpdate") adminUserRoleUpdate("adminUser:roleUpdate"),
        @Json(name = "cart:show") cartShow("cart:show"),
        @Json(name = "cart:update") cartUpdate("cart:update"),
        @Json(name = "code:delete") codeDelete("code:delete"),
        @Json(name = "code:read") codeRead("code:read"),
        @Json(name = "code:write") codeWrite("code:write"),
        @Json(name = "user:createApiKey") userCreateApiKey("user:createApiKey"),
        @Json(name = "domainAction:read") domainActionRead("domainAction:read"),
        @Json(name = "domainEvent:read") domainEventRead("domainEvent:read"),
        @Json(name = "edition:delete") editionDelete("edition:delete"),
        @Json(name = "edition:read") editionRead("edition:read"),
        @Json(name = "edition:write") editionWrite("edition:write"),
        @Json(name = "emojiGroups:delete") emojiGroupsDelete("emojiGroups:delete"),
        @Json(name = "emojiGroups:read") emojiGroupsRead("emojiGroups:read"),
        @Json(name = "emojiGroups:write") emojiGroupsWrite("emojiGroups:write"),
        @Json(name = "emoji::transfer") emojiTransfer("emoji::transfer"),
        @Json(name = "feature::delete") featureDelete("feature::delete"),
        @Json(name = "feature::read") featureRead("feature::read"),
        @Json(name = "feature::write") featureWrite("feature::write"),
        @Json(name = "lootbox:use") lootboxUse("lootbox:use"),
        @Json(name = "order:paymentOverride") orderPaymentOverride("order:paymentOverride"),
        @Json(name = "order:read") orderRead("order:read"),
        @Json(name = "order:readSelf") orderReadSelf("order:readSelf"),
        @Json(name = "order:refund") orderRefund("order:refund"),
        @Json(name = "order:refundOverride") orderRefundOverride("order:refundOverride"),
        @Json(name = "order:resendConfirmation") orderResendConfirmation("order:resendConfirmation"),
        @Json(name = "organization:admin") organizationAdmin("organization:admin"),
        @Json(name = "organizationCode:admin") organizationCodeAdmin("organizationCode:admin"),
        @Json(name = "organizationEmoji:list") organizationEmojiList("organizationEmoji:list"),
        @Json(name = "organizationEmoji:write") organizationEmojiWrite("organizationEmoji:write"),
        @Json(name = "organizationList:read") organizationListRead("organizationList:read"),
        @Json(name = "organization:read") organizationRead("organization:read"),
        @Json(name = "organizationUser:admin") organizationUserAdmin("organizationUser:admin"),
        @Json(name = "organizationUser:read") organizationUserRead("organizationUser:read"),
        @Json(name = "organization:write") organizationWrite("organization:write"),
        @Json(name = "nftSignature:write") nftSignatureWrite("nftSignature:write"),
        @Json(name = "nftToken:destroy") nftTokenDestroy("nftToken:destroy"),
        @Json(name = "nftTransfer:read") nftTransferRead("nftTransfer:read"),
        @Json(name = "paymentMethod:destroy") paymentMethodDestroy("paymentMethod:destroy"),
        @Json(name = "paymentMethod:read") paymentMethodRead("paymentMethod:read"),
        @Json(name = "paymentMethod:setDefault") paymentMethodSetDefault("paymentMethod:setDefault"),
        @Json(name = "adminPriceParameters:read") adminPriceParametersRead("adminPriceParameters:read"),
        @Json(name = "adminPriceParameters:write") adminPriceParametersWrite("adminPriceParameters:write"),
        @Json(name = "refund:read") refundRead("refund:read"),
        @Json(name = "token:refresh") tokenRefresh("token:refresh"),
        @Json(name = "auth:twoFactor") authTwoFactor("auth:twoFactor"),
        @Json(name = "user:activate") userActivate("user:activate"),
        @Json(name = "userData:update") userDataUpdate("userData:update"),
        @Json(name = "user:delete") userDelete("user:delete"),
        @Json(name = "user:deleteSelf") userDeleteSelf("user:deleteSelf"),
        @Json(name = "userEmail:verify") userEmailVerify("userEmail:verify"),
        @Json(name = "userEmoji:list") userEmojiList("userEmoji:list"),
        @Json(name = "userInterest:delete") userInterestDelete("userInterest:delete"),
        @Json(name = "userInterest:read") userInterestRead("userInterest:read"),
        @Json(name = "userInterest:write") userInterestWrite("userInterest:write"),
        @Json(name = "user:list") userList("user:list"),
        @Json(name = "userPubkeys:list") userPubkeysList("userPubkeys:list"),
        @Json(name = "userPubkeys:write") userPubkeysWrite("userPubkeys:write"),
        @Json(name = "user:show") userShow("user:show"),
        @Json(name = "user:write") userWrite("user:write"),
        @Json(name = "user:writeSelf") userWriteSelf("user:writeSelf");
    }
    /**
    * The role this user has in each organisation. Organisations are currently not used, but are reserved for  future operations.
    * Values: admin,orgController,orgMember,orgOwner,bot,`super`,user
    */
    
    enum class OrganizationRoles(val value: String){
        @Json(name = "Admin") admin("Admin"),
        @Json(name = "OrgController") orgController("OrgController"),
        @Json(name = "OrgMember") orgMember("OrgMember"),
        @Json(name = "OrgOwner") orgOwner("OrgOwner"),
        @Json(name = "Bot") bot("Bot"),
        @Json(name = "Super") `super`("Super"),
        @Json(name = "User") user("User");
    }
    /**
    * The scopes that are granted to this user for each organisation. Organisations are currently not used, but are  reserved for future operations.
    * Values: adminCartUpdate,adminEmojiDestroy,adminEmojiLoad,adminEmojiRegister,adminEmojiTransfer,adminEmojiUpdateFeatures,adminEmojiUpdateSecureData,adminEmojiWrite,adminFeatureUserRead,adminInvitesWrite,adminInvitesList,adminLootboxRead,adminLootboxWrite,adminNotificationsWrite,adminUserBypass2fa,adminUserLoad,adminUserLoginAs,adminUserTwoFactorAuthDestroy,adminUserRoleUpdate,cartShow,cartUpdate,codeDelete,codeRead,codeWrite,userCreateApiKey,domainActionRead,domainEventRead,editionDelete,editionRead,editionWrite,emojiGroupsDelete,emojiGroupsRead,emojiGroupsWrite,emojiTransfer,featureDelete,featureRead,featureWrite,lootboxUse,orderPaymentOverride,orderRead,orderReadSelf,orderRefund,orderRefundOverride,orderResendConfirmation,organizationAdmin,organizationCodeAdmin,organizationEmojiList,organizationEmojiWrite,organizationListRead,organizationRead,organizationUserAdmin,organizationUserRead,organizationWrite,nftSignatureWrite,nftTokenDestroy,nftTransferRead,paymentMethodDestroy,paymentMethodRead,paymentMethodSetDefault,adminPriceParametersRead,adminPriceParametersWrite,refundRead,tokenRefresh,authTwoFactor,userActivate,userDataUpdate,userDelete,userDeleteSelf,userEmailVerify,userEmojiList,userInterestDelete,userInterestRead,userInterestWrite,userList,userPubkeysList,userPubkeysWrite,userShow,userWrite,userWriteSelf
    */
    
    enum class OrganizationScopes(val value: String){
        @Json(name = "adminCart:update") adminCartUpdate("adminCart:update"),
        @Json(name = "adminEmoji:destroy") adminEmojiDestroy("adminEmoji:destroy"),
        @Json(name = "adminEmoji:load") adminEmojiLoad("adminEmoji:load"),
        @Json(name = "adminEmoji:register") adminEmojiRegister("adminEmoji:register"),
        @Json(name = "adminEmoji:transfer") adminEmojiTransfer("adminEmoji:transfer"),
        @Json(name = "adminEmoji:updateFeatures") adminEmojiUpdateFeatures("adminEmoji:updateFeatures"),
        @Json(name = "adminEmoji:updateSecureData") adminEmojiUpdateSecureData("adminEmoji:updateSecureData"),
        @Json(name = "adminEmoji:write") adminEmojiWrite("adminEmoji:write"),
        @Json(name = "adminFeatureUser:read") adminFeatureUserRead("adminFeatureUser:read"),
        @Json(name = "adminInvites:write") adminInvitesWrite("adminInvites:write"),
        @Json(name = "adminInvites:list") adminInvitesList("adminInvites:list"),
        @Json(name = "adminLootbox:read") adminLootboxRead("adminLootbox:read"),
        @Json(name = "adminLootbox:write") adminLootboxWrite("adminLootbox:write"),
        @Json(name = "adminNotifications:write") adminNotificationsWrite("adminNotifications:write"),
        @Json(name = "adminUser:bypass2fa") adminUserBypass2fa("adminUser:bypass2fa"),
        @Json(name = "adminUser:load") adminUserLoad("adminUser:load"),
        @Json(name = "adminUser:loginAs") adminUserLoginAs("adminUser:loginAs"),
        @Json(name = "adminUser:twoFactorAuthDestroy") adminUserTwoFactorAuthDestroy("adminUser:twoFactorAuthDestroy"),
        @Json(name = "adminUser:roleUpdate") adminUserRoleUpdate("adminUser:roleUpdate"),
        @Json(name = "cart:show") cartShow("cart:show"),
        @Json(name = "cart:update") cartUpdate("cart:update"),
        @Json(name = "code:delete") codeDelete("code:delete"),
        @Json(name = "code:read") codeRead("code:read"),
        @Json(name = "code:write") codeWrite("code:write"),
        @Json(name = "user:createApiKey") userCreateApiKey("user:createApiKey"),
        @Json(name = "domainAction:read") domainActionRead("domainAction:read"),
        @Json(name = "domainEvent:read") domainEventRead("domainEvent:read"),
        @Json(name = "edition:delete") editionDelete("edition:delete"),
        @Json(name = "edition:read") editionRead("edition:read"),
        @Json(name = "edition:write") editionWrite("edition:write"),
        @Json(name = "emojiGroups:delete") emojiGroupsDelete("emojiGroups:delete"),
        @Json(name = "emojiGroups:read") emojiGroupsRead("emojiGroups:read"),
        @Json(name = "emojiGroups:write") emojiGroupsWrite("emojiGroups:write"),
        @Json(name = "emoji::transfer") emojiTransfer("emoji::transfer"),
        @Json(name = "feature::delete") featureDelete("feature::delete"),
        @Json(name = "feature::read") featureRead("feature::read"),
        @Json(name = "feature::write") featureWrite("feature::write"),
        @Json(name = "lootbox:use") lootboxUse("lootbox:use"),
        @Json(name = "order:paymentOverride") orderPaymentOverride("order:paymentOverride"),
        @Json(name = "order:read") orderRead("order:read"),
        @Json(name = "order:readSelf") orderReadSelf("order:readSelf"),
        @Json(name = "order:refund") orderRefund("order:refund"),
        @Json(name = "order:refundOverride") orderRefundOverride("order:refundOverride"),
        @Json(name = "order:resendConfirmation") orderResendConfirmation("order:resendConfirmation"),
        @Json(name = "organization:admin") organizationAdmin("organization:admin"),
        @Json(name = "organizationCode:admin") organizationCodeAdmin("organizationCode:admin"),
        @Json(name = "organizationEmoji:list") organizationEmojiList("organizationEmoji:list"),
        @Json(name = "organizationEmoji:write") organizationEmojiWrite("organizationEmoji:write"),
        @Json(name = "organizationList:read") organizationListRead("organizationList:read"),
        @Json(name = "organization:read") organizationRead("organization:read"),
        @Json(name = "organizationUser:admin") organizationUserAdmin("organizationUser:admin"),
        @Json(name = "organizationUser:read") organizationUserRead("organizationUser:read"),
        @Json(name = "organization:write") organizationWrite("organization:write"),
        @Json(name = "nftSignature:write") nftSignatureWrite("nftSignature:write"),
        @Json(name = "nftToken:destroy") nftTokenDestroy("nftToken:destroy"),
        @Json(name = "nftTransfer:read") nftTransferRead("nftTransfer:read"),
        @Json(name = "paymentMethod:destroy") paymentMethodDestroy("paymentMethod:destroy"),
        @Json(name = "paymentMethod:read") paymentMethodRead("paymentMethod:read"),
        @Json(name = "paymentMethod:setDefault") paymentMethodSetDefault("paymentMethod:setDefault"),
        @Json(name = "adminPriceParameters:read") adminPriceParametersRead("adminPriceParameters:read"),
        @Json(name = "adminPriceParameters:write") adminPriceParametersWrite("adminPriceParameters:write"),
        @Json(name = "refund:read") refundRead("refund:read"),
        @Json(name = "token:refresh") tokenRefresh("token:refresh"),
        @Json(name = "auth:twoFactor") authTwoFactor("auth:twoFactor"),
        @Json(name = "user:activate") userActivate("user:activate"),
        @Json(name = "userData:update") userDataUpdate("userData:update"),
        @Json(name = "user:delete") userDelete("user:delete"),
        @Json(name = "user:deleteSelf") userDeleteSelf("user:deleteSelf"),
        @Json(name = "userEmail:verify") userEmailVerify("userEmail:verify"),
        @Json(name = "userEmoji:list") userEmojiList("userEmoji:list"),
        @Json(name = "userInterest:delete") userInterestDelete("userInterest:delete"),
        @Json(name = "userInterest:read") userInterestRead("userInterest:read"),
        @Json(name = "userInterest:write") userInterestWrite("userInterest:write"),
        @Json(name = "user:list") userList("user:list"),
        @Json(name = "userPubkeys:list") userPubkeysList("userPubkeys:list"),
        @Json(name = "userPubkeys:write") userPubkeysWrite("userPubkeys:write"),
        @Json(name = "user:show") userShow("user:show"),
        @Json(name = "user:write") userWrite("user:write"),
        @Json(name = "user:writeSelf") userWriteSelf("user:writeSelf");
    }
    /**
    * The role assigned to this user. Roles grant authority to user accounts to perform certain actions.
    * Values: admin,orgController,orgMember,orgOwner,bot,`super`,user
    */
    
    enum class Role(val value: kotlin.String){
        @Json(name = "Admin") admin("Admin"),
        @Json(name = "OrgController") orgController("OrgController"),
        @Json(name = "OrgMember") orgMember("OrgMember"),
        @Json(name = "OrgOwner") orgOwner("OrgOwner"),
        @Json(name = "Bot") bot("Bot"),
        @Json(name = "Super") `super`("Super"),
        @Json(name = "User") user("User");
    }
}

