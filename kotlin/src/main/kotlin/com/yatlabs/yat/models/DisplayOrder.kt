/**
* Emoji ID API server
* Emoji ID is a directory service that associates almost any type of structured data with a short, memorable identifier the emoji id.
*
* The version of the OpenAPI document: 0.2.262
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.yatlabs.yat.models

import com.yatlabs.yat.models.DisplayOrderOrderItems
import com.yatlabs.yat.models.DisplayOrderPaymentMethodData
import com.yatlabs.yat.models.DisplayOrderUser

import com.squareup.moshi.Json
import java.io.Serializable

/**
 * 
 * @param amountOverpaidInCents Amount overpaid in cents
 * @param createdAt A UTC timestamp for when this order was initially created.
 * @param eligibleForRefund Whether an order is eligible for a refund via an admin.
 * @param id The unique identifier for this order
 * @param miscRefundedTotalInCents The total of miscellaneous refund amounts retirned to the order.
 * @param orderItems The list of individual line items making up this order.
 * @param orderNumber The order number is the last 8 characters of the order's ID for user display purposes.
 * @param refundedTotalInCents The total of refund amounts for the order.
 * @param remainingDueInCents Remaining due in cents to mark the cart as Paid
 * @param status The order of the status. Orders start in 'Draft' status, then move to 'PendingPayment' and finally, 'Paid',  unless they are 'Cancelled'.
 * @param totalInCents The sum of all the items in this order, plus fees, in USD cents.
 * @param updatedAt A UTC timestamp for the last time any field in this order was modified.
 * @param user 
 * @param userId The identifier of the user placing this order
 * @param expiresAt Checkout carts have a limited time before they expire. This prevents users from blocking inventory from being  sold to other customers. The expiry time is configurable on the server and is typically 5 minutes.
 * @param organizationId The organization id of the user, if applicable. This will generally be null, unless the purchase is coming via  a referral programme.
 * @param paidAt A UTC timestamp for when payment for this order was received. Will be null if no payment has been made yet.
 * @param paymentMethodData 
 * @param secondsUntilExpiry A convenience field indicating how long before `expires_at` is reached.
 */

data class DisplayOrder (
    /* Amount overpaid in cents */
    @Json(name = "amount_overpaid_in_cents")
    val amountOverpaidInCents: kotlin.Long,
    /* A UTC timestamp for when this order was initially created. */
    @Json(name = "created_at")
    val createdAt: java.time.OffsetDateTime,
    /* Whether an order is eligible for a refund via an admin. */
    @Json(name = "eligible_for_refund")
    val eligibleForRefund: kotlin.Boolean,
    /* The unique identifier for this order */
    @Json(name = "id")
    val id: java.util.UUID,
    /* The total of miscellaneous refund amounts retirned to the order. */
    @Json(name = "misc_refunded_total_in_cents")
    val miscRefundedTotalInCents: kotlin.Long,
    /* The list of individual line items making up this order. */
    @Json(name = "order_items")
    val orderItems: kotlin.collections.List<DisplayOrderOrderItems>,
    /* The order number is the last 8 characters of the order's ID for user display purposes. */
    @Json(name = "order_number")
    val orderNumber: kotlin.String,
    /* The total of refund amounts for the order. */
    @Json(name = "refunded_total_in_cents")
    val refundedTotalInCents: kotlin.Long,
    /* Remaining due in cents to mark the cart as Paid */
    @Json(name = "remaining_due_in_cents")
    val remainingDueInCents: kotlin.Long,
    /* The order of the status. Orders start in 'Draft' status, then move to 'PendingPayment' and finally, 'Paid',  unless they are 'Cancelled'. */
    @Json(name = "status")
    val status: DisplayOrder.Status,
    /* The sum of all the items in this order, plus fees, in USD cents. */
    @Json(name = "total_in_cents")
    val totalInCents: kotlin.Long,
    /* A UTC timestamp for the last time any field in this order was modified. */
    @Json(name = "updated_at")
    val updatedAt: java.time.OffsetDateTime,
    @Json(name = "user")
    val user: DisplayOrderUser,
    /* The identifier of the user placing this order */
    @Json(name = "user_id")
    val userId: java.util.UUID,
    /* Checkout carts have a limited time before they expire. This prevents users from blocking inventory from being  sold to other customers. The expiry time is configurable on the server and is typically 5 minutes. */
    @Json(name = "expires_at")
    val expiresAt: java.time.OffsetDateTime? = null,
    /* The organization id of the user, if applicable. This will generally be null, unless the purchase is coming via  a referral programme. */
    @Json(name = "organization_id")
    val organizationId: java.util.UUID? = null,
    /* A UTC timestamp for when payment for this order was received. Will be null if no payment has been made yet. */
    @Json(name = "paid_at")
    val paidAt: java.time.OffsetDateTime? = null,
    @Json(name = "payment_method_data")
    val paymentMethodData: DisplayOrderPaymentMethodData? = null,
    /* A convenience field indicating how long before `expires_at` is reached. */
    @Json(name = "seconds_until_expiry")
    val secondsUntilExpiry: kotlin.Int? = null
) : Serializable {
    companion object {
        private const val serialVersionUID: Long = 123
    }

    /**
    * The order of the status. Orders start in 'Draft' status, then move to 'PendingPayment' and finally, 'Paid',  unless they are 'Cancelled'.
    * Values: cancelled,draft,paid,pendingPayment
    */
    
    enum class Status(val value: kotlin.String){
        @Json(name = "Cancelled") cancelled("Cancelled"),
        @Json(name = "Draft") draft("Draft"),
        @Json(name = "Paid") paid("Paid"),
        @Json(name = "PendingPayment") pendingPayment("PendingPayment");
    }
}

