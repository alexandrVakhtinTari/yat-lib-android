/**
* Emoji ID API server
* Emoji ID is a directory service that associates almost any type of structured data with a short, memorable identifier the emoji id.
*
* The version of the OpenAPI document: 0.2.262
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.yatlabs.yat.apis

import com.yatlabs.yat.models.ProxyCallParameters
import com.yatlabs.yat.models.ProxyResult

import com.yatlabs.yat.infrastructure.ApiClient
import com.yatlabs.yat.infrastructure.ClientException
import com.yatlabs.yat.infrastructure.ClientError
import com.yatlabs.yat.infrastructure.ServerException
import com.yatlabs.yat.infrastructure.ServerError
import com.yatlabs.yat.infrastructure.MultiValueMap
import com.yatlabs.yat.infrastructure.RequestConfig
import com.yatlabs.yat.infrastructure.RequestMethod
import com.yatlabs.yat.infrastructure.ResponseType
import com.yatlabs.yat.infrastructure.Success

class ProxyApi : ApiClient() {

    companion object {
        // The shared singleton.
        val shared = ProxyApi()
    }

    /**
    * Calls a pre-defined proxy service with the provided data
    * Returns the response from the proxied service as a string
    * @param body  
    * @return ProxyResult
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun callProxy(body: ProxyCallParameters) : ProxyResult {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/proxy",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val localVarResponse = request<ProxyResult>(
            localVariableConfig,
            localVariableBody
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProxyResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

}
