/**
* Emoji ID API server
* Emoji ID is a directory service that associates almost any type of structured data with a short, memorable identifier the emoji id.
*
* The version of the OpenAPI document: 0.2.262
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package yat.android.sdk.models



import com.google.gson.annotations.SerializedName
import java.io.Serializable

/**
 * 
 * @param activate Optional: Whether to force activation during creation (requires UserActivate scope)
 * @param activationSource Optional: Source of activation (requires UserActivate scope)
 * @param alternateId Alternate identifier
 * @param email Email address
 * @param firstName Optional: first name
 * @param gRecaptchaResponse Response from google Recaptcha
 * @param lastName Optional: last name
 * @param partnerConversionId Parameter to pass everflow click id
 * @param password Optional: password
 * @param source Required when registering with `alternate_id`, source for non custodial user
 */

data class RegisterUserParameters (
    /* Optional: Whether to force activation during creation (requires UserActivate scope) */
    @SerializedName( "activate")
    val activate: kotlin.Boolean? = null,
    /* Optional: Source of activation (requires UserActivate scope) */
    @SerializedName( "activation_source")
    val activationSource: kotlin.String? = null,
    /* Alternate identifier */
    @SerializedName( "alternate_id")
    val alternateId: kotlin.String? = null,
    /* Email address */
    @SerializedName( "email")
    val email: kotlin.String? = null,
    /* Optional: first name */
    @SerializedName( "first_name")
    val firstName: kotlin.String? = null,
    /* Response from google Recaptcha */
    @SerializedName( "g_recaptcha_response")
    val gRecaptchaResponse: kotlin.String? = null,
    /* Optional: last name */
    @SerializedName( "last_name")
    val lastName: kotlin.String? = null,
    /* Parameter to pass everflow click id */
    @SerializedName( "partner_conversion_id")
    val partnerConversionId: kotlin.String? = null,
    /* Optional: password */
    @SerializedName( "password")
    val password: kotlin.String? = null,
    /* Required when registering with `alternate_id`, source for non custodial user */
    @SerializedName( "source")
    val source: kotlin.String? = null
) : Serializable {
    companion object {
        private const val serialVersionUID: Long = 123
    }

}

