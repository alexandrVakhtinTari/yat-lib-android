/**
* Emoji ID API server
* Emoji ID is a directory service that associates almost any type of structured data with a short, memorable identifier the emoji id.
*
* The version of the OpenAPI document: 0.2.262
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package yat.android.sdk.models



import com.google.gson.annotations.SerializedName
import java.io.Serializable

/**
 * 
 * @param apiKey 
 * @param createdAt 
 * @param name 
 * @param scopes 
 * @param expiresAt 
 */

data class DisplayApiKey (
    @SerializedName( "api_key")
    val apiKey: kotlin.String,
    @SerializedName( "created_at")
    val createdAt: java.time.OffsetDateTime,
    @SerializedName( "name")
    val name: kotlin.String,
    @SerializedName( "scopes")
    val scopes: List<DisplayApiKey.Scopes>,
    @SerializedName( "expires_at")
    val expiresAt: java.time.OffsetDateTime? = null
) : Serializable {
    companion object {
        private const val serialVersionUID: Long = 123
    }

    /**
    * 
    * Values: adminCartUpdate,adminEmojiDestroy,adminEmojiLoad,adminEmojiRegister,adminEmojiTransfer,adminEmojiUpdateFeatures,adminEmojiUpdateSecureData,adminEmojiWrite,adminFeatureUserRead,adminInvitesWrite,adminInvitesList,adminLootboxRead,adminLootboxWrite,adminNotificationsWrite,adminUserBypass2fa,adminUserLoad,adminUserLoginAs,adminUserTwoFactorAuthDestroy,adminUserRoleUpdate,cartShow,cartUpdate,codeDelete,codeRead,codeWrite,userCreateApiKey,domainActionRead,domainEventRead,editionDelete,editionRead,editionWrite,emojiGroupsDelete,emojiGroupsRead,emojiGroupsWrite,emojiTransfer,featureDelete,featureRead,featureWrite,lootboxUse,orderPaymentOverride,orderRead,orderReadSelf,orderRefund,orderRefundOverride,orderResendConfirmation,organizationAdmin,organizationCodeAdmin,organizationEmojiList,organizationEmojiWrite,organizationListRead,organizationRead,organizationUserAdmin,organizationUserRead,organizationWrite,nftSignatureWrite,nftTokenDestroy,nftTransferRead,paymentMethodDestroy,paymentMethodRead,paymentMethodSetDefault,adminPriceParametersRead,adminPriceParametersWrite,refundRead,tokenRefresh,authTwoFactor,userActivate,userDataUpdate,userDelete,userDeleteSelf,userEmailVerify,userEmojiList,userInterestDelete,userInterestRead,userInterestWrite,userList,userPubkeysList,userPubkeysWrite,userShow,userWrite,userWriteSelf
    */
    
    enum class Scopes(val value: String){
        @SerializedName( "adminCart:update") adminCartUpdate("adminCart:update"),
        @SerializedName( "adminEmoji:destroy") adminEmojiDestroy("adminEmoji:destroy"),
        @SerializedName( "adminEmoji:load") adminEmojiLoad("adminEmoji:load"),
        @SerializedName( "adminEmoji:register") adminEmojiRegister("adminEmoji:register"),
        @SerializedName( "adminEmoji:transfer") adminEmojiTransfer("adminEmoji:transfer"),
        @SerializedName( "adminEmoji:updateFeatures") adminEmojiUpdateFeatures("adminEmoji:updateFeatures"),
        @SerializedName( "adminEmoji:updateSecureData") adminEmojiUpdateSecureData("adminEmoji:updateSecureData"),
        @SerializedName( "adminEmoji:write") adminEmojiWrite("adminEmoji:write"),
        @SerializedName( "adminFeatureUser:read") adminFeatureUserRead("adminFeatureUser:read"),
        @SerializedName( "adminInvites:write") adminInvitesWrite("adminInvites:write"),
        @SerializedName( "adminInvites:list") adminInvitesList("adminInvites:list"),
        @SerializedName( "adminLootbox:read") adminLootboxRead("adminLootbox:read"),
        @SerializedName( "adminLootbox:write") adminLootboxWrite("adminLootbox:write"),
        @SerializedName( "adminNotifications:write") adminNotificationsWrite("adminNotifications:write"),
        @SerializedName( "adminUser:bypass2fa") adminUserBypass2fa("adminUser:bypass2fa"),
        @SerializedName( "adminUser:load") adminUserLoad("adminUser:load"),
        @SerializedName( "adminUser:loginAs") adminUserLoginAs("adminUser:loginAs"),
        @SerializedName( "adminUser:twoFactorAuthDestroy") adminUserTwoFactorAuthDestroy("adminUser:twoFactorAuthDestroy"),
        @SerializedName( "adminUser:roleUpdate") adminUserRoleUpdate("adminUser:roleUpdate"),
        @SerializedName( "cart:show") cartShow("cart:show"),
        @SerializedName( "cart:update") cartUpdate("cart:update"),
        @SerializedName( "code:delete") codeDelete("code:delete"),
        @SerializedName( "code:read") codeRead("code:read"),
        @SerializedName( "code:write") codeWrite("code:write"),
        @SerializedName( "user:createApiKey") userCreateApiKey("user:createApiKey"),
        @SerializedName( "domainAction:read") domainActionRead("domainAction:read"),
        @SerializedName( "domainEvent:read") domainEventRead("domainEvent:read"),
        @SerializedName( "edition:delete") editionDelete("edition:delete"),
        @SerializedName( "edition:read") editionRead("edition:read"),
        @SerializedName( "edition:write") editionWrite("edition:write"),
        @SerializedName( "emojiGroups:delete") emojiGroupsDelete("emojiGroups:delete"),
        @SerializedName( "emojiGroups:read") emojiGroupsRead("emojiGroups:read"),
        @SerializedName( "emojiGroups:write") emojiGroupsWrite("emojiGroups:write"),
        @SerializedName( "emoji::transfer") emojiTransfer("emoji::transfer"),
        @SerializedName( "feature::delete") featureDelete("feature::delete"),
        @SerializedName( "feature::read") featureRead("feature::read"),
        @SerializedName( "feature::write") featureWrite("feature::write"),
        @SerializedName( "lootbox:use") lootboxUse("lootbox:use"),
        @SerializedName( "order:paymentOverride") orderPaymentOverride("order:paymentOverride"),
        @SerializedName( "order:read") orderRead("order:read"),
        @SerializedName( "order:readSelf") orderReadSelf("order:readSelf"),
        @SerializedName( "order:refund") orderRefund("order:refund"),
        @SerializedName( "order:refundOverride") orderRefundOverride("order:refundOverride"),
        @SerializedName( "order:resendConfirmation") orderResendConfirmation("order:resendConfirmation"),
        @SerializedName( "organization:admin") organizationAdmin("organization:admin"),
        @SerializedName( "organizationCode:admin") organizationCodeAdmin("organizationCode:admin"),
        @SerializedName( "organizationEmoji:list") organizationEmojiList("organizationEmoji:list"),
        @SerializedName( "organizationEmoji:write") organizationEmojiWrite("organizationEmoji:write"),
        @SerializedName( "organizationList:read") organizationListRead("organizationList:read"),
        @SerializedName( "organization:read") organizationRead("organization:read"),
        @SerializedName( "organizationUser:admin") organizationUserAdmin("organizationUser:admin"),
        @SerializedName( "organizationUser:read") organizationUserRead("organizationUser:read"),
        @SerializedName( "organization:write") organizationWrite("organization:write"),
        @SerializedName( "nftSignature:write") nftSignatureWrite("nftSignature:write"),
        @SerializedName( "nftToken:destroy") nftTokenDestroy("nftToken:destroy"),
        @SerializedName( "nftTransfer:read") nftTransferRead("nftTransfer:read"),
        @SerializedName( "paymentMethod:destroy") paymentMethodDestroy("paymentMethod:destroy"),
        @SerializedName( "paymentMethod:read") paymentMethodRead("paymentMethod:read"),
        @SerializedName( "paymentMethod:setDefault") paymentMethodSetDefault("paymentMethod:setDefault"),
        @SerializedName( "adminPriceParameters:read") adminPriceParametersRead("adminPriceParameters:read"),
        @SerializedName( "adminPriceParameters:write") adminPriceParametersWrite("adminPriceParameters:write"),
        @SerializedName( "refund:read") refundRead("refund:read"),
        @SerializedName( "token:refresh") tokenRefresh("token:refresh"),
        @SerializedName( "auth:twoFactor") authTwoFactor("auth:twoFactor"),
        @SerializedName( "user:activate") userActivate("user:activate"),
        @SerializedName( "userData:update") userDataUpdate("userData:update"),
        @SerializedName( "user:delete") userDelete("user:delete"),
        @SerializedName( "user:deleteSelf") userDeleteSelf("user:deleteSelf"),
        @SerializedName( "userEmail:verify") userEmailVerify("userEmail:verify"),
        @SerializedName( "userEmoji:list") userEmojiList("userEmoji:list"),
        @SerializedName( "userInterest:delete") userInterestDelete("userInterest:delete"),
        @SerializedName( "userInterest:read") userInterestRead("userInterest:read"),
        @SerializedName( "userInterest:write") userInterestWrite("userInterest:write"),
        @SerializedName( "user:list") userList("user:list"),
        @SerializedName( "userPubkeys:list") userPubkeysList("userPubkeys:list"),
        @SerializedName( "userPubkeys:write") userPubkeysWrite("userPubkeys:write"),
        @SerializedName( "user:show") userShow("user:show"),
        @SerializedName( "user:write") userWrite("user:write"),
        @SerializedName( "user:writeSelf") userWriteSelf("user:writeSelf");
    }
}

