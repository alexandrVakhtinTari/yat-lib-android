/**
* Emoji ID API server
* Emoji ID is a directory service that associates almost any type of structured data with a short, memorable identifier the emoji id.
*
* The version of the OpenAPI document: 0.2.262
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package yat.android.sdk.models



import com.google.gson.annotations.SerializedName
import java.io.Serializable

/**
 * 
 * @param method Payment method type
 * @param amount Amount paid in cash. Applicable and required only for `Cash` payment option for Admin.
 * @param cancelUrl URL user will be redirected if payment cancelled  Required for Stripe Checkout
 * @param externalReference External reference for cash payment. Applicable and required only for `Cash` payment option for Admin.
 * @param pubkey Optional: The user's public key to associate with this emoji id. If provided will use this pubkey otherwise  will default to the first pubkey returned for the user.
 * @param successUrl URL user will be redirected after successful payment  Required for Stripe Checkout
 * @param trackingData Optional: tracking data
 */

data class CheckoutCartRequest (
    /* Payment method type */
    @SerializedName( "method")
    val method: CheckoutCartRequest.Method,
    /* Amount paid in cash. Applicable and required only for `Cash` payment option for Admin. */
    @SerializedName( "amount")
    val amount: kotlin.Long? = null,
    /* URL user will be redirected if payment cancelled  Required for Stripe Checkout */
    @SerializedName( "cancel_url")
    val cancelUrl: kotlin.String? = null,
    /* External reference for cash payment. Applicable and required only for `Cash` payment option for Admin. */
    @SerializedName( "external_reference")
    val externalReference: kotlin.String? = null,
    /* Optional: The user's public key to associate with this emoji id. If provided will use this pubkey otherwise  will default to the first pubkey returned for the user. */
    @SerializedName( "pubkey")
    val pubkey: kotlin.String? = null,
    /* URL user will be redirected after successful payment  Required for Stripe Checkout */
    @SerializedName( "success_url")
    val successUrl: kotlin.String? = null,
    /* Optional: tracking data */
    @SerializedName( "tracking_data")
    val trackingData: kotlin.Any? = null
) : Serializable {
    companion object {
        private const val serialVersionUID: Long = 123
    }

    /**
    * Payment method type
    * Values: free,coinbaseCommerce,stripe,cash,payPal
    */
    
    enum class Method(val value: kotlin.String){
        @SerializedName( "Free") free("Free"),
        @SerializedName( "CoinbaseCommerce") coinbaseCommerce("CoinbaseCommerce"),
        @SerializedName( "Stripe") stripe("Stripe"),
        @SerializedName( "Cash") cash("Cash"),
        @SerializedName( "PayPal") payPal("PayPal");
    }
}

