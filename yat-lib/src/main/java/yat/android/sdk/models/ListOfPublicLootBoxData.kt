/**
* Emoji ID API server
* Emoji ID is a directory service that associates almost any type of structured data with a short, memorable identifier the emoji id.
*
* The version of the OpenAPI document: 0.2.262
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package yat.android.sdk.models


import com.google.gson.annotations.SerializedName
import java.io.Serializable

/**
 * 
 * @param averageRhythmScore Average score of emoji IDs in loot box
 * @param createdAt 
 * @param id 
 * @param prices The prices of the yats in the box, in cents
 * @param scores The rhythm scores of the yats in the box
 * @param status Status loot box will be created in
 * @param totalValue Total value of EmojiIDs in the Loot Box
 * @param yats Loot box yats
 * @param lootboxType 
 * @param lootboxTypeId For Admin: The type of loot box, if applicable
 * @param owner 
 * @param ownerId Loot box owner_id, required for Owned and Used loot boxes
 */

data class ListOfPublicLootBoxData (
    /* Average score of emoji IDs in loot box */
    @SerializedName( "average_rhythm_score")
    val averageRhythmScore: kotlin.Double,
    @SerializedName( "created_at")
    val createdAt: java.time.OffsetDateTime,
    @SerializedName( "id")
    val id: java.util.UUID,
    /* The prices of the yats in the box, in cents */
    @SerializedName( "prices")
    val prices: kotlin.collections.List<kotlin.Int>,
    /* The rhythm scores of the yats in the box */
    @SerializedName( "scores")
    val scores: kotlin.collections.List<kotlin.Long>,
    /* Status loot box will be created in */
    @SerializedName( "status")
    val status: ListOfPublicLootBoxData.Status,
    /* Total value of EmojiIDs in the Loot Box */
    @SerializedName( "total_value")
    val totalValue: kotlin.Double,
    /* Loot box yats */
    @SerializedName( "yats")
    val yats: kotlin.collections.List<kotlin.String>,
    @SerializedName( "lootbox_type")
    val lootboxType: ListOfPublicLootBoxLootboxType? = null,
    /* For Admin: The type of loot box, if applicable */
    @SerializedName( "lootbox_type_id")
    val lootboxTypeId: java.util.UUID? = null,
    @SerializedName( "owner")
    val owner: ListOfPublicLootBoxOwner? = null,
    /* Loot box owner_id, required for Owned and Used loot boxes */
    @SerializedName( "owner_id")
    val ownerId: java.util.UUID? = null
) : Serializable {
    companion object {
        private const val serialVersionUID: Long = 123
    }

    /**
    * Status loot box will be created in
    * Values: draft,available,owned,used
    */
    
    enum class Status(val value: kotlin.String){
        @SerializedName( "Draft") draft("Draft"),
        @SerializedName( "Available") available("Available"),
        @SerializedName( "Owned") owned("Owned"),
        @SerializedName( "Used") used("Used");
    }
}

